
Critical code studies (CCS) is an emerging academic subfield, related to software studies,[1] digital humanities,[2] cultural studies, computer science, human–computer interface, and the do-it-yourself maker culture. Its primary focus is on the cultural significance of computer code, without excluding or focusing solely upon the code's functional purpose. According to Mark C. Marino, it is an approach that applies critical hermeneutics to the interpretation of computer code, program architecture, and documentation within a socio-historical context. CCS holds that lines of code are not value-neutral and can be analyzed using the theoretical approaches applied to other semiotic systems in addition to particular interpretive methods developed particularly for the discussions of programs.[3]As introduced by Marino, critical code studies was initially a method by which scholars "can read and explicate code the way we might explicate a work of literature",[3] but the concept also draws upon[citation needed] Espen Aarseth's conception of a cybertext as a "mechanical device for the production and consumption of verbal signs",[4] arguing that in order to understand a digital artifact we must also understand the constraints and capabilities of the authoring tools used by the creator of the artifact, as well as the memory storage and interface required for the user to experience the digital artifact.
Evidence that critical code studies has gained momentum since 2006 include[original research?] an article by Matthew Kirschenbaum in The Chronicle of Higher Education,[5] CCS sessions at the Modern Language Association in 2011 that were "packed" with attendees,[6] several academic conferences devoted wholly to critical code studies, and a book devoted to the explication of a single line of computer code, titled 10 PRINT CHR$(205.5+RND(1)); : GOTO 10.[7]
